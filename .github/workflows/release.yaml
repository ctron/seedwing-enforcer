name: release

on:
  push:
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
      - "v*"


permissions:
  contents: write # for creating a release
  packages: write # for publishing containers
  id-token: write # for using OIDC tokens

env:
  SYFT_VERSION: "0.68.1"
  IMAGE_NAME: seedwing-enforcer

jobs:

  init:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}
    steps:
      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && (echo 'do-publish=true' >> $GITHUB_OUTPUT)
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo release=true >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo prerelease=true >> $GITHUB_OUTPUT
          fi
      - name: Set version
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT


  # check that our CI would pass
  ci:
    uses: ./.github/workflows/ci.yaml


  # now do the actual (release) builds
  build:
    needs: [ init, ci ]

    strategy:
      matrix:
        target:
          - linux-amd64
          - linux-aarch64
          - macos-amd64
          - macos-aarch64
          - windows-amd64
        include:
          - target: linux-amd64
            os: ubuntu-22.04
            vscodeTarget: "linux-x64"
            features: "vendored"
          - target: linux-aarch64
            os: ubuntu-22.04
            vscodeTarget: "linux-arm64"
            crossTarget: "aarch64-unknown-linux-gnu"
            features: "vendored"
          - target: macos-amd64
            os: macos-12
            vscodeTarget: "darwin-x64"
          - target: macos-aarch64
            os: macos-12
            vscodeTarget: "darwin-arm64"
            rustTarget: "aarch64-apple-darwin"
            xcode: "true"
          - target: windows-amd64
            os: windows-2022
            vscodeTarget: "win32-x64"
            exe: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Parameters
        shell: bash
        run: |
          echo "Pre-release: ${{ needs.init.outputs.prerelease }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: npm ci
        working-directory: seedwing-enforcer-vscode-addon

      - run: rustup target add ${{ matrix.rustTarget }}
        if: matrix.rustTarget != ''

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.xcode }}" == "true" ]]; then
            export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
            export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
          fi
          
          OPTS="--release"
          
          if [[ -n "${{ matrix.rustTarget }}" ]]; then
            OPTS="$OPTS --target=${{ matrix.rustTarget }}"
          fi
          
          if [[ -n "${{ matrix.features }}" ]]; then
            OPTS="$OPTS --features=${{ matrix.features }}"
          fi
          
          CMD="cargo"
          
          if [[ -n "${{ matrix.crossTarget }}" ]]; then
            cargo install cross
            CMD="cross"
            OPTS="$OPTS --target=${{ matrix.crossTarget }}"
          fi
          
          ${CMD} build ${OPTS}

      - name: List output
        shell: bash
        run: ls -lR target/

      - name: Copy binary
        shell: bash
        run: |
          mkdir -p upload
          SRC="target/release/senf${{ matrix.exe }}"
          
          # if we have an alternate target, there is a sub-directory
          if [[ -n "${{ matrix.rustTarget }}" ]]; then
            SRC="target/${{ matrix.rustTarget }}/release/senf${{ matrix.exe }}"
          fi
          if [[ -n "${{ matrix.crossTarget }}" ]]; then
            SRC="target/${{ matrix.crossTarget }}/release/senf${{ matrix.exe }}"
          fi
          
          # for upload
          cp -pv "${SRC}" upload/senf-${{ matrix.target }}${{ matrix.exe }}
          
          # for vsix
          mkdir -p seedwing-enforcer-vscode-addon/dist/cli
          cp -pv "${SRC}" seedwing-enforcer-vscode-addon/dist/cli/senf-${{ matrix.target }}${{ matrix.exe }}

      - name: Build vsix
        working-directory: seedwing-enforcer-vscode-addon
        shell: bash
        run: |
          OPTS="--target ${{ matrix.vscodeTarget }}"
          if [[ "${{ needs.init.outputs.prerelease }}" == "true" ]]; then
            OPTS="${OPTS} --pre-release"
          fi
          echo "Building with: ${OPTS}"
          
          version=$(npm run --silent vsce-version -- "${{ need.init.output.version }}")
          echo "Setting version to: ${version}"
          npx vsce package ${OPTS} -o dist/senf-${{ matrix.target }}.vsix --no-git-tag-version --no-update-package-json "${version}"

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: senf-${{ matrix.target }}
          path: upload/senf-${{ matrix.target }}${{ matrix.exe }}
          if-no-files-found: error

      - name: Upload vsix
        uses: actions/upload-artifact@v3
        with:
          name: vsix-${{ matrix.target }}
          path: seedwing-enforcer-vscode-addon/dist/senf-${{ matrix.target }}.vsix
          if-no-files-found: error

  # prepare cargo-cyclonedx in parallel
  cargo-cyclonedx:
    needs: [ ci ]
    runs-on: ubuntu-22.04
    steps:
      - run: cargo install cargo-cyclonedx

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: cargo-cyclonedx
          path: ~/.cargo/bin/cargo-cyclonedx
          if-no-files-found: error

  publish:
    needs: [ init, build, cargo-cyclonedx ]
    runs-on: ubuntu-22.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install cyclonedx cli
        run: |
          curl -sLO https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.2/cyclonedx-linux-x64
          sudo install cyclonedx-linux-x64 /usr/local/bin/cyclonedx
          cyclonedx --version

      - name: Install convco
        run: |
          curl -sLO https://github.com/convco/convco/releases/download/v0.4.0/convco-ubuntu.zip
          unzip convco-ubuntu.zip
          chmod a+x convco
          sudo mv convco /usr/local/bin

      - name: Install cosign
        uses: sigstore/cosign-installer@v2

      - name: Check cosign
        run: cosign version

      - name: Generate changelog
        run: |
          convco changelog -s --max-majors=1 --max-minors=1 --max-patches=1 > /tmp/changelog.md

      - uses: actions/download-artifact@v3
        with:
          path: ~/download

      - name: Display downloaded content
        run: ls -R ~/download

      - name: Stage release
        run: |
          mkdir -p staging
          # this includes the binaries a well as the .vsix packages
          cp -pv ~/download/*/senf-* staging/

      - name: Move cargo-cyclonedx
        run: |
          mv ~/download/cargo-cyclonedx/cargo-cyclonedx ~/.cargo/bin/
          chmod a+x ~/.cargo/bin/cargo-cyclonedx

      - name: Create SBOM of the cargo projects
        # create SBOM from source project
        run: |
          cargo cyclonedx --all --format json
          cp seedwing-enforcer-cli/bom.json staging/cli.project.sbom.json

      - name: Cosign blobs
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          for i in $(ls staging/senf*); do
            cosign sign-blob --yes --b64=false ${i} --output-signature ${i}.cosign.sig --output-certificate ${i}.cosign.crt
          done

      - name: Display staging area
        run: ls -R staging

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.init.outputs.version }}
        run: |
          OPTS=""
          if [[ "${{ needs.init.outputs.prerelease }}" == "true" ]]; then
            OPTS="${OPTS} -p"
          fi
          gh release create ${OPTS} --title "${{ needs.init.outputs.version }}" -F /tmp/changelog.md ${TAG} \
            $(find staging -type f)
